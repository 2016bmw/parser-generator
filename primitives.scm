(define (p:string string)
  (let ((str-len (length string)))
    (define (string-match data success)
      (and (< (length data) str-len)
	   (string=? string (substring data 0 str-len))
	   (success (list string) str-len)))
    string-match))
    

(define (p:seq . args)
  (define (seq-match data success)
    (let lp ((lst (car args))
	     (cur-data data)
	     (cur-parse-tree (list)))
      (cond ((pair? args)
	     ((car args) cur-data 
			 (lambda (parse-tree num-consumed)
			   (lp (cdr args)
			       (substring cur-data num-consumed (length cur-data))
			       (append cur-parse-tree parse-tree)))))
	    ((null? args)
	     (success cur-parse-tree (- (length data) (length cur-data))))
	    (else (error "Should not get here!")))))
  seq-match)
